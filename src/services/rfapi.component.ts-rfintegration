import {Network} from "ionic-native";
import {Component, Injectable, NgZone} from "@angular/core";
import {Http, Headers, RequestOptions, URLSearchParams} from "@angular/http";
import {Observable} from 'rxjs/Observable';
import 'rxjs/Rx';
import { reorderArray, Platform, Events } from 'ionic-angular';
import {observable, autorun} from "mobx";
import { Issue } from './issues';
import PouchDB from 'pouchdb';


let favorites = [],
    propertiesURL = '/properties',
    favoritesURL  = '/favorites';

interface dataset {
    name:  string;
    title: string;
    body:  string;
    id:    number;
    sort:  number;
    moddate:  number;
    modified: boolean;
};

interface rfContributions {
    Documents: any;
    Hash: string;
    Limit: number;
    NumFound: number;
    Offset: number;
    QueryTime: number;
}

declare var Connection: any;

@Injectable()

export class Api {
    http: any;
    storage: any;
    current: number = 0;
    data: Array < dataset > = [];
    dataPrototype: Array < dataset > = [
      {name: 'rf001', title: 'Empty Title', body: "Write Here", id: 0, sort: 0, moddate: 0, modified: false}
    ];

    credentials: {user: string, rokey: string, rwkey: string, server: string} = {
      user:   "",
      rokey:  "",
      rwkey:  "",
      server: ""
    };

    jwt: string = "";
    getOptions: any;
    postOptions: any;
    issues: any;
    current_issue: number = 0;
    initialized: any = false;
    onDevice: boolean;
    zone: any;
    events: any;

    constructor (http:Http, platform: Platform, zone: NgZone, events: Events) {
        this.http = http;
        this.events = events;
        this.storage = new PouchDB('rfWriter', {
          size: 50
        });
        this.current = 0;
        this.onDevice = platform.is('cordova');
        this.zone = zone;
    }

    syncCouch() {
      var _this = this;
      var sync = this.storage.sync(`http://192.168.1.60:5984/rf-${this.credentials.user}`, {
        live: true,
        retry: true,
        continuous: true,
        auth: {
          username: _this.credentials.user,
          password: _this.credentials.rwkey
        }
      }).on('change', function (info) {
        // handle change
        if (info.direction === "pull") {

          info.change.docs.forEach((d) => {

              /*
               Keys in the Database
               credentials
               current
               current_issue
               issues
              */

              if (d._id === "current_issue") {
                console.log("Sync Issue", d.data, _this);
                _this.current_issue = d.data;
              }
              if (d._id === "current"){
                console.log("Sync Current Page", d.data, _this);
                _this.current = d.data;
                _this.events.publish('page:change', _this.current);
              }
              if (d._id === "credentials"){
                console.log("Sync Credentials", d.data, _this);
                _this.credentials = d.data;
              }
              if (/data-.*/.test(d._id)) {
                console.log("Sync Data", d.data, _this);
                _this.data = d.data;
              }
              _this.zone.run(() => {});

          });
        }
      }).on('paused', function (err) {
        // replication paused (e.g. replication up to date, user went offline)
      }).on('active', function () {
        // replicate resumed (e.g. new changes replicating, user went back online)
      }).on('denied', function (err) {
        // a document failed to replicate (e.g. due to permissions)
      }).on('complete', function (info) {
        // handle complete
      }).on('error', function (err) {
        // handle error
      });
    }

    isOnline() {
      if(this.onDevice && Network.connection){
        return Network.connection !== Connection.NONE;
      } else {
        return navigator.onLine;
      }
    }

    dbStore(document:string, data:any): Promise<any> {
      var _this = this;
      return new Promise(resolve => {
        _this.storage.get(document).then(function(doc) {
          return _this.storage.put({
            _id: document,
            _rev: doc._rev,
            data: data
          });
        }).then(function(response) {
          resolve(true);
        }).catch(function (err) {
          resolve(false);
        });
      });
    }

    dbGet(document:string): Promise<any> {
      var _this = this;
      return new Promise(resolve => {
        _this.storage.get(document).then(function(doc) {
          resolve(doc.data);
        }).catch(function (err) {
          _this.storage.put({
            _id: document,
            data: false
          }).then(function(doc) {
            resolve(false);
          });
        });
      });
    }

    initialize() {
      console.log("Initializing API");
      return new Promise(resolve => {
        this.dbGet('credentials').then((credentials) => {
          /* Creating Initial JWT Token for Post Calls */
          if (credentials) {
            console.log("- loading credentials");
            this.credentials = credentials;
            this.syncCouch();

            /* Options for Get Calls */
            let headers = new Headers();
            headers.append('Content-Type', 'application/json');
            headers.append('Authorization', `Bearer ${this.credentials.rokey}`);
            this.getOptions = new RequestOptions({ headers: headers });


            this.createJWT().then((d) => {

              /* Loading Issues */

              this.getIssues().then((issues) => {

                /* Loading Server Data */

                this.getData().then((server_data:rfContributions) => {
                  //console.log(server_data);

                  /* Loading Local Data */
                  this.dbGet('data-'+this.current_issue).then((local_data) => {
                    this.data = local_data || [];
                    this.data.forEach(c => {
                      if (this.isOnline()) {
                        if (c.id === 0) {
                          this.addDocToServer(c).then((newId) => {
                            if (newId) {
                              this.storeDocOnServer(c).then((success) => {
                                console.log("Adding Remote: " + c.name);
                              });
                            }
                            else {
                              console.log('Adding Document Failed. No Network connection probably.');
                            }
                          });
                        }
                        /* Document has Id but is locally modified */
                        else if (c.modified === true) {
                          for (var i = 0, len = server_data.Documents.length; i < len; i++) {
                            let sd = server_data.Documents[i];
                            if (sd.Contribution.Id == c.id) {
                              /* Foreign Document is newer - import data */
                              c.sort = sd.Contribution.Sort;
                              if (sd.Contribution.Moddate > c.moddate) {
                                c.title = sd.Data.Title.Field.Content;
                                c.body = sd.Data.Body.Field.Content;
                                c.name = sd.Contribution.Name;
                                c.moddate = sd.Contribution.Moddate;
                                c.modified = false;
                                console.log("Updating Local: " + c.name);
                              }
                              /* Local Document has the same age - probably modified. So store changes now */
                              else {
                                this.storeDocOnServer(c).then((success) => {
                                  console.log("Updating Remote: " + c.name);
                                });
                              }
                              break;
                            }
                          }
                        }
                      }
                    })

                    /* Sync Foreign Data with Local Data */
                    if (server_data.Documents) {
                      server_data.Documents.forEach((sd) => {
                        let exists = false;
                        for (var i = 0, len = this.data.length; i < len; i++) {
                          var ld = this.data[i];
                          /* Local Exists */
                          if (ld.id == sd.Contribution.Id) {
                            exists = true;
                            /* Updating Local Data if outdated and not modified - modified docs are already synced */
                            ld.sort = sd.Contribution.Sort;
                            console.log("Updating Sort: " + sd.Contribution.Sort);

                            if (sd.Contribution.Moddate > ld.moddate) {
                              ld.title = sd.Data.Title.Field.Content;
                              ld.body = sd.Data.Body.Field.Content;
                              ld.name = sd.Contribution.Name;
                              ld.modified = false;
                              ld.moddate = sd.Contribution.Moddate;
                              console.log("Updating Local: " + sd.Contribution.Name, sd, ld);
                            }
                            break;
                          }
                        }
                        if (!exists) {
                          let newdata:dataset = {
                            title    : sd.Data.Title.Field.Content,
                            body     : sd.Data.Body.Field.Content,
                            name     : sd.Contribution.Name,
                            modified : false,
                            moddate  : sd.Contribution.Moddate,
                            id       : sd.Contribution.Id,
                            sort     : sd.Contribution.Sort
                          };
                          this.add(sd.Contribution.Sort, newdata);
                          console.log("Adding Page from Server", newdata, sd);
                        }
                      })
                    }


                    /* Initial Sorting according to sort Property */
                    this.data.sort(function(a, b){
                      return Number(a.sort) - Number(b.sort);
                    })

                    this.dbStore('data-'+this.current_issue, this.data);

                })
                this.dbGet('current').then((d) => {
                  console.log("- loading current page");
                  this.current = d || this.current;
                  this.initialized = true;
                  resolve(this.current);
                });
              });
            });
          });
        }
        else {
          this.initialized = true;
          resolve(false);
        }
      }).catch((error) => {

        console.log("---POUCH---", error);

      });
    });
  }

    storeDocOnServer(doc:dataset) {
      doc.modified = true;
      return new Promise(resolve => {
        let payload = {
          Name: doc.name,
          Sort: doc.sort,
          Data: {
              Title: doc.title,
              Body: doc.body
          }
        };
        this.http.post(
          this.credentials.server +
          '/api/contribution/' + doc.id, JSON.stringify(payload), this.postOptions)
            .map(res => res.json())
            .subscribe(
              data => {
                doc.moddate = data.ModDate;
                doc.modified = false;
                resolve(true);
              },
              err => {
                this.handleError(err);
                resolve(false);
              },
              () => {
                console.log('Remote Store Doc Complete', doc.id)
              }
            );
      });
    }

    deleteDocOnServer(doc:dataset) {
      return new Promise(resolve => {
        this.http.delete(
          this.credentials.server +
          '/api/contribution/' + doc.id, this.postOptions)
            .map(res => res.json())
            .subscribe(
              data => {
                resolve(true);
              },
              err => {
                resolve(false);
              },
              () => {
                console.log('Remote Delete Doc Complete', doc.id)
              }
            );
      });
    }

    addDocToServer(doc:dataset) {
      return new Promise(resolve => {
        let payload = {
          Template:2,
          Name: doc.name,
          Chapter: 2,
          Issue: Number(this.current_issue),
          Status: "Draft"
        };
        this.http.put(
          this.credentials.server +
          '/api/contribution', JSON.stringify(payload), this.postOptions)
            .map(res => res.json())
            .subscribe(
              data => {
                doc.id = data.Id;
                doc.moddate = data.ModDate;
                resolve(data.Id);
              },
              err => {
                this.handleError(err);
                resolve(false);
              },
              () => {
                console.log('Loading Data Complete')
              }
            );
      });
    }

    changeIssue() {
      this.dbStore('current_issue', this.current_issue).then(d => {
        console.log("Switched to " + this.current_issue);
        this.setCurrent(0);
        this.initialize();
      });
    }

    getData () {
      return new Promise(resolve => {
        return this.http.get(
          this.credentials.server +
          '/api/contributions/' +
          this.current_issue  +
          '/2?verbose=true&status=both&populate=true&sort=sort:asc', this.getOptions)
            .map(res => res.json())
            .subscribe(
              data => {
                resolve(data);
              },
              err => {
                this.handleError(err);
                resolve(false);
              },
              () => {
                console.log('Loading Data Complete')
              }
            );
        });
    }

    getIssues () {
      return new Promise(resolve => {
        return this.http.get(this.credentials.server + '/api/issues', this.getOptions)
            .map(res => res.json())
            .subscribe(
              data => {
                this.dbStore('issues', data);
                this.issues = data;
                this.loadCurrentIssue().then((d) => {
                  resolve(this.issues);
                });
              },
              err => {
                // this.handleError(err);
                this.dbGet('issues').then((issues_offline) => {
                  this.issues = issues_offline || false;
                  this.loadCurrentIssue().then((d) => {
                    resolve(this.issues);
                  });
                });
              },
              () => {
                console.log('Loading Issues Complete')
              }
            );
      });
    }

    loadCurrentIssue() {
      return new Promise(resolve => {
        this.dbGet('current_issue').then((current_issue) => {
          if (current_issue) {
            this.current_issue = current_issue;
          }
          else {
            this.current_issue = this.issues === false ? false : this.issues.Issues[0].Id;
            this.dbStore('issues', this.current_issue);
          }
          resolve(this.current_issue);
        });
      });
    }

    change() {
      if (this.initialized === false) return;
      this.storeDocOnServer(this.data[this.current]).then((c) => {
        this.dbStore('data-'+this.current_issue, this.data);
        console.log('Local Store Doc Complete', this.current);
      });
    }

    reorder(indexes){
      if (this.initialized === false) return;
      this.data = reorderArray(this.data, indexes);
      this.data.forEach((e,i) => {
        if (e.sort != i) {
          e.sort = i;
          this.storeDocOnServer(e);
        }
      })
      this.dbStore('data-'+this.current_issue, this.data);
    }

    delete(item) {
      if (this.initialized === false) return;
      this.deleteDocOnServer(this.data[item]).then((success) => {
        if (success) {
          this.data.splice(item, 1);
          this.dbStore('data-'+this.current_issue, this.data);
        }
      });
    }

    add(position: number, data: dataset) {
      this.data.splice(position, 0, data);
      return new Promise(resolve => {
        this.dbStore('data-'+this.current_issue, this.data).then((d) => {
          resolve(true);
        });
      });
    }

    setCurrent(id:number) {
      if (this.initialized === false) return;
      console.log("Updating Current Set ", id);
      this.current = id;
      this.dbStore('current', id);
    }

    getCurrentData() {
      return this.data[this.current];
    }

    getCurrent() {
      return this.current;
    }

    handleError(error) {
        console.error("Error", error);
        this.jwt = "";
        return Observable.throw('Server error');
    }

    createJWT() {
      return new Promise(resolve => {
        const formData = new FormData();
        formData.append('username',  this.credentials.user);
        formData.append('apikey',  this.credentials.rwkey);

        this.http.post(this.credentials.server + '/api/login', formData)
          .map(res => {
            try {
              res.json()
            } catch (e) {
              return false;
            }
            return res.json();
          })
          .subscribe(
            data => {
              this.jwt = data;
              let headers = new Headers();
              headers.append('Content-Type', 'application/json');
              headers.append('Authorization', `Bearer ${this.jwt}`);
              this.postOptions = new RequestOptions({ headers: headers });
              setTimeout(() => {
                this.createJWT();
              }, 60 * 1000);
              /* Better Approach: Create Token before every Save, pass Save as Callback function */
            },
            err => {
              //this.handleError(err);
              resolve(false);
            },
            () => {
              console.log('Authentication Complete')
              resolve(true);
            }
          );
      });
    }

    clearJWT() {
      this.jwt = "";
      this.postOptions = null;
    }

    /* Called if settings changed */
    storeCredentials() {
      this.dbStore('credentials', this.credentials);
    }
}
